/* ========================================
   SALV√î - CONFIGURA√á√ÉO FIREBASE CORRIGIDA
   Projeto: salvo-vancouvertec
   Status: CREDENCIAIS CONFIGURADAS + CAPTCHA SIMPLES
======================================== */

// Configura√ß√£o Firebase
const firebaseConfig = {
  apiKey: "AIzaSyBgbTXNG-ZBgFWoawEyZdhXWAQiUBBcWOA",
  authDomain: "salvo-vancouvertec.firebaseapp.com",
  projectId: "salvo-vancouvertec",
  storageBucket: "salvo-vancouvertec.firebasestorage.app",
  messagingSenderId: "393597458878",
  appId: "1:393597458878:web:59aebeb2a76975099a81ef",
  measurementId: "G-89P9XGPMKC"
};

// Classe principal do Firebase
class SalvoFirebase {
  static isConfigured = false;
  static db = null;

  static init() {
    try {
      // Verificar se Firebase SDK est√° carregado
      if (typeof firebase === 'undefined') {
        console.warn('‚ö†Ô∏è Firebase SDK n√£o carregado. Usando modo simula√ß√£o.');
        return false;
      }

      // Inicializar Firebase apenas uma vez
      if (firebase.apps.length === 0) {
        firebase.initializeApp(firebaseConfig);
      }

      // Inicializar Firestore
      this.db = firebase.firestore();
      this.isConfigured = true;

      console.log('üî• Firebase inicializado com sucesso!');
      console.log('üìä Projeto: salvo-vancouvertec');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Firebase:', error);
      console.warn('üìÑ Continuando em modo simula√ß√£o...');
      return false;
    }
  }

  // Salvar cadastro no Firestore (CORRIGIDO)
  static async saveCadastro(dados, tipo) {
    try {
      if (!this.isConfigured) {
        console.log('üìÑ Firebase n√£o configurado, usando simula√ß√£o');
        return this.simulateSave(dados, tipo);
      }

      // Preparar dados do cadastro
      const baseData = {
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
        status: 'ativo',
        source: 'landing_page',
        tipo: tipo
      };

      let cadastroData = { ...baseData };
      let collection = 'cadastros';

      // CORRE√á√ÉO: Estruturar dados baseado no tipo de formul√°rio
      if (tipo === 'PF') {
        cadastroData = {
          ...baseData,
          // CORRE√á√ÉO: Mapear nomeCompleto do HTML para nome no Firebase
          nome: dados.nomeCompleto || dados.nome || '',
          whatsapp: this.formatPhone(dados.whatsapp) || '',
          email: dados.email?.trim().toLowerCase() || '',
          cidade: dados.cidade?.trim() || '',
          uf: dados.uf || '',
          // CORRE√á√ÉO: Mapear aceiteLGPD corretamente
          termos: dados.aceiteLGPD === 'on' || dados.aceiteLGPD === true
        };
        collection = 'leads_pf';

      } else if (tipo === 'PJ') {
        cadastroData = {
          ...baseData,
          razaoSocial: dados.razaoSocial?.trim() || '',
          nomeFantasia: dados.nomeFantasia?.trim() || dados.razaoSocial?.trim() || '',
          cnpj: this.formatCNPJ(dados.cnpj) || '',
          whatsapp: this.formatPhone(dados.whatsapp) || '',
          email: dados.email?.trim().toLowerCase() || '',
          cidade: dados.cidade?.trim() || '',
          uf: dados.uf || '',
          termos: dados.aceiteLGPD === 'on' || dados.aceiteLGPD === true
        };
        collection = 'leads_pj';
      }

      // Validar dados obrigat√≥rios
      const validation = this.validateData(cadastroData, tipo);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          message: `Erro de valida√ß√£o: ${validation.error}`
        };
      }

      // Salvar no Firestore (cole√ß√£o espec√≠fica + geral)
      const docRefSpecific = await this.db.collection(collection).add(cadastroData);
      const docRefGeneral = await this.db.collection('cadastros').add(cadastroData);

      console.log('‚úÖ Cadastro salvo com sucesso!');
      console.log('üìã ID espec√≠fico:', docRefSpecific.id);
      console.log('üìã ID geral:', docRefGeneral.id);

      // Enviar para webhook (se configurado)
      this.sendToWebhook(cadastroData);

      return {
        success: true,
        id: docRefSpecific.id,
        message: 'Cadastro realizado com sucesso!'
      };

    } catch (error) {
      console.error('‚ùå Erro ao salvar cadastro:', error);

      return {
        success: false,
        error: error.message,
        message: 'Erro ao realizar cadastro. Tente novamente em alguns instantes.'
      };
    }
  }

  // Validar dados antes de salvar
  static validateData(data, tipo) {
    if (tipo === 'PF') {
      if (!data.nome || data.nome.length < 2) {
        return { valid: false, error: 'Nome √© obrigat√≥rio' };
      }
      if (!data.whatsapp || data.whatsapp.length < 10) {
        return { valid: false, error: 'WhatsApp √© obrigat√≥rio' };
      }
      if (!data.cidade || data.cidade.length < 2) {
        return { valid: false, error: 'Cidade √© obrigat√≥ria' };
      }
      if (!data.uf) {
        return { valid: false, error: 'UF √© obrigat√≥ria' };
      }
    } else if (tipo === 'PJ') {
      if (!data.razaoSocial || data.razaoSocial.length < 2) {
        return { valid: false, error: 'Raz√£o Social √© obrigat√≥ria' };
      }
      if (!data.cnpj || data.cnpj.length < 14) {
        return { valid: false, error: 'CNPJ √© obrigat√≥rio' };
      }
      if (!data.whatsapp || data.whatsapp.length < 10) {
        return { valid: false, error: 'WhatsApp √© obrigat√≥rio' };
      }
      if (!data.email || !data.email.includes('@')) {
        return { valid: false, error: 'E-mail √© obrigat√≥rio para PJ' };
      }
    }

    return { valid: true };
  }

  // Formata√ß√£o de telefone
  static formatPhone(phone) {
    if (!phone) return '';
    return phone.replace(/\D/g, '').substring(0, 11);
  }

  // Formata√ß√£o de CNPJ
  static formatCNPJ(cnpj) {
    if (!cnpj) return '';
    return cnpj.replace(/\D/g, '').substring(0, 14);
  }

  // Simular salvamento quando Firebase n√£o est√° configurado
  static async simulateSave(dados, tipo) {
    console.log('üìÑ Simulando salvamento:', { dados, tipo });
    
    // Simular delay de rede
    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 1000));
    
    // Simular sucesso na maioria das vezes
    const success = Math.random() > 0.15; // 85% de sucesso
    
    if (success) {
      const simulatedId = 'sim_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      console.log('‚úÖ Simula√ß√£o: Cadastro salvo com ID:', simulatedId);
      
      return {
        success: true,
        id: simulatedId,
        message: 'Cadastro realizado com sucesso! (modo simula√ß√£o)'
      };
    } else {
      console.log('‚ùå Simula√ß√£o: Erro no cadastro');
      return {
        success: false,
        error: 'Erro simulado de rede',
        message: 'Erro tempor√°rio. Tente novamente.'
      };
    }
  }

  // Enviar para webhook (integra√ß√£o externa)
  static async sendToWebhook(dados) {
    try {
      // Configure sua URL de webhook aqui
      const webhookUrl = 'https://webhook.site/seu-webhook-aqui';
      
      // Se n√£o houver webhook configurado, skip
      if (webhookUrl.includes('seu-webhook-aqui')) {
        console.log('‚ö†Ô∏è Webhook n√£o configurado');
        return;
      }

      const payload = {
        event: 'novo_cadastro',
        timestamp: new Date().toISOString(),
        dados: dados,
        source: 'salvo_landing_page'
      };

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Source': 'salvo-landing'
        },
        body: JSON.stringify(payload)
      });

      if (response.ok) {
        console.log('üì§ Dados enviados para webhook com sucesso');
      } else {
        console.warn('‚ö†Ô∏è Erro no webhook:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Falha ao enviar webhook:', error.message);
    }
  }

  // Estat√≠sticas do Firebase (para dashboard futuro)
  static async getStats() {
    if (!this.isConfigured) return null;

    try {
      const [totalPF, totalPJ] = await Promise.all([
        this.db.collection('leads_pf').get(),
        this.db.collection('leads_pj').get()
      ]);

      return {
        total: totalPF.size + totalPJ.size,
        pf: totalPF.size,
        pj: totalPJ.size
      };
    } catch (error) {
      console.error('Erro ao buscar estat√≠sticas:', error);
      return null;
    }
  }
}

// Classe para Captcha Simples (substitui reCAPTCHA)
class SalvoCaptcha {
  static currentAnswer = 0;
  static isValid = false;
  
  static init() {
    this.generateNew();
    this.setupEvents();
    console.log('üõ°Ô∏è Captcha simples inicializado');
  }
  
  static generateNew() {
    // Gerar opera√ß√£o matem√°tica simples
    const operations = [
      () => {
        const a = Math.floor(Math.random() * 10) + 1;
        const b = Math.floor(Math.random() * 10) + 1;
        this.currentAnswer = a + b;
        return `${a} + ${b} = ?`;
      },
      () => {
        const a = Math.floor(Math.random() * 15) + 5;
        const b = Math.floor(Math.random() * 5) + 1;
        this.currentAnswer = a - b;
        return `${a} - ${b} = ?`;
      },
      () => {
        const a = Math.floor(Math.random() * 5) + 2;
        const b = Math.floor(Math.random() * 5) + 2;
        this.currentAnswer = a * b;
        return `${a} √ó ${b} = ?`;
      }
    ];
    
    const operation = operations[Math.floor(Math.random() * operations.length)];
    const questionText = operation();
    
    const questionEl = document.getElementById('captcha-question');
    const answerEl = document.getElementById('captcha-answer');
    
    if (questionEl) questionEl.textContent = questionText;
    if (answerEl) {
      answerEl.value = '';
      answerEl.classList.remove('error');
    }
    
    this.isValid = false;
    this.hideError();
    
    console.log('üî¢ Nova opera√ß√£o:', questionText, '=', this.currentAnswer);
  }
  
  static setupEvents() {
    const answerEl = document.getElementById('captcha-answer');
    if (answerEl) {
      answerEl.addEventListener('input', () => this.validateAnswer());
      answerEl.addEventListener('blur', () => this.validateAnswer());
    }
  }
  
  static validateAnswer() {
    const answerEl = document.getElementById('captcha-answer');
    if (!answerEl) return false;
    
    const userAnswer = parseInt(answerEl.value);
    const isCorrect = userAnswer === this.currentAnswer;
    
    if (answerEl.value.trim() === '') {
      // Campo vazio - remover estados de erro/sucesso
      answerEl.classList.remove('error');
      this.hideError();
      this.isValid = false;
      return false;
    }
    
    if (isCorrect) {
      answerEl.classList.remove('error');
      this.hideError();
      this.isValid = true;
      console.log('‚úÖ Captcha validado com sucesso');
    } else {
      answerEl.classList.add('error');
      this.showError();
      this.isValid = false;
    }
    
    return isCorrect;
  }
  
  static showError() {
    const errorEl = document.getElementById('captcha-error');
    if (errorEl) errorEl.style.display = 'block';
  }
  
  static hideError() {
    const errorEl = document.getElementById('captcha-error');
    if (errorEl) errorEl.style.display = 'none';
  }
  
  static refresh() {
    this.generateNew();
    const answerEl = document.getElementById('captcha-answer');
    if (answerEl) answerEl.focus();
  }
  
  static verify() {
    if (!this.isValid) {
      this.validateAnswer();
    }
    
    if (!this.isValid) {
      const answerEl = document.getElementById('captcha-answer');
      if (answerEl) {
        answerEl.focus();
        answerEl.classList.add('error');
      }
      this.showError();
      alert('Por favor, resolva a opera√ß√£o matem√°tica para continuar.');
      return false;
    }
    
    return true;
  }
  
  static reset() {
    this.generateNew();
  }
}

// Inicializar quando DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(() => {
    SalvoFirebase.init();
    SalvoCaptcha.init();
  }, 1000);
});

// Expor classes globalmente
window.SalvoFirebase = SalvoFirebase;
window.SalvoCaptcha = SalvoCaptcha;