/* ========================================
   SALV√î - M√ÅSCARAS E VALIDA√á√ïES CORRIGIDAS
   Integra√ß√£o completa com Firebase + Captcha Simples
======================================== */

// Classe para gerenciar m√°scaras
class SalvoMasks {
    static init() {
        this.setupWhatsAppMask();
        this.setupCNPJMask();
        this.setupFormValidations();
        console.log('üé≠ SalvoMasks inicializado');
    }

    // M√°scara para WhatsApp
    static setupWhatsAppMask() {
        document.querySelectorAll('input[type="tel"], input[name="whatsapp"]').forEach(input => {
            input.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');

                // Limitar a 11 d√≠gitos
                if (value.length > 11) {
                    value = value.slice(0, 11);
                }

                // Aplicar m√°scara
                if (value.length <= 10) {
                    value = value.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
                } else {
                    value = value.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
                }

                e.target.value = value;
            });

            // Placeholder din√¢mico
            input.placeholder = '(11) 99999-9999';
        });
    }

    // M√°scara para CNPJ
    static setupCNPJMask() {
        document.querySelectorAll('#pj-cnpj, input[name="cnpj"]').forEach(input => {
            input.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');

                // Limitar a 14 d√≠gitos
                if (value.length > 14) {
                    value = value.slice(0, 14);
                }

                // Aplicar m√°scara
                value = value.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
                e.target.value = value;
            });

            // Placeholder
            input.placeholder = '00.000.000/0000-00';
        });
    }

    // Valida√ß√µes de formul√°rio
    static setupFormValidations() {
        // Valida√ß√£o em tempo real
        document.querySelectorAll('.form__input').forEach(input => {
            input.addEventListener('blur', function() {
                if (this.value.trim()) {
                    SalvoMasks.validateField(this);
                }
            });

            input.addEventListener('input', function() {
                // Remover estado de erro ao digitar
                const fieldGroup = this.closest('.form__group');
                if (fieldGroup && fieldGroup.classList.contains('error')) {
                    fieldGroup.classList.remove('error');
                    const errorEl = document.getElementById(this.id + '-error');
                    if (errorEl) errorEl.textContent = '';
                }
                // Remover classe de erro do pr√≥prio input
                this.classList.remove('form__input--error');
            });
        });

        // Valida√ß√£o no submit
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                SalvoMasks.submitForm(this);
            });
        });
    }

    // Validar campo individual
    static validateField(field) {
        const fieldGroup = field.closest('.form__group');
        const errorElement = document.getElementById(field.id + '-error');

        // Remover estados anteriores
        if (fieldGroup) {
            fieldGroup.classList.remove('error', 'success');
        }
        if (errorElement) errorElement.textContent = '';
        field.classList.remove('form__input--error');

        let isValid = true;
        let errorMessage = '';

        // Verificar se √© obrigat√≥rio
        if (field.hasAttribute('required') && !field.value.trim()) {
            isValid = false;
            errorMessage = 'Este campo √© obrigat√≥rio';
        }
        // Validar e-mail
        else if (field.type === 'email' && field.value && !this.isValidEmail(field.value)) {
            isValid = false;
            errorMessage = 'Digite um e-mail v√°lido';
        }
        // Validar WhatsApp
        else if ((field.type === 'tel' || field.name === 'whatsapp') && field.value && !this.isValidPhone(field.value)) {
            isValid = false;
            errorMessage = 'Digite um WhatsApp v√°lido';
        }
        // Validar CNPJ
        else if ((field.id === 'pj-cnpj' || field.name === 'cnpj') && field.value && !this.isValidCNPJ(field.value)) {
            isValid = false;
            errorMessage = 'Digite um CNPJ v√°lido';
        }

        if (!isValid && fieldGroup && errorElement) {
            fieldGroup.classList.add('error');
            field.classList.add('form__input--error');
            errorElement.textContent = errorMessage;
            errorElement.style.display = 'block';
        } else if (field.value.trim() && fieldGroup) {
            fieldGroup.classList.add('success');
        }

        return isValid;
    }

    // Validar formul√°rio completo
    static validateForm(form) {
        let isValid = true;
        const requiredFields = form.querySelectorAll('[required]');

        requiredFields.forEach(field => {
            if (!this.validateField(field)) {
                isValid = false;
            }
        });

        // Validar LGPD
        const lgpdCheckbox = form.querySelector('input[name="aceiteLGPD"]');
        if (lgpdCheckbox && !lgpdCheckbox.checked) {
            isValid = false;
            const errorElement = document.getElementById('pf-lgpd-error') || document.getElementById('pj-lgpd-error');
            if (errorElement) {
                errorElement.textContent = 'Voc√™ deve aceitar os termos para continuar';
                errorElement.style.display = 'block';
            }
        }

        return isValid;
    }

    // Submeter formul√°rio (vers√£o integrada com Firebase)
    static async submitForm(form) {
        const submitBtn = form.querySelector('button[type="submit"]');
        const btnText = submitBtn.querySelector('.btn__text');
        const btnLoading = submitBtn.querySelector('.btn__loading');

        // 1. VERIFICAR CAPTCHA SIMPLES PRIMEIRO
        if (window.SalvoCaptcha && !window.SalvoCaptcha.verify()) {
            return; // Captcha inv√°lido, parar aqui
        }

        // 2. VALIDAR FORMUL√ÅRIO
        if (!this.validateForm(form)) {
            // Focar no primeiro campo com erro
            const firstError = form.querySelector('.form__input--error');
            if (firstError) firstError.focus();
            return;
        }

        // 3. MOSTRAR LOADING
        submitBtn.disabled = true;
        submitBtn.classList.add('loading');
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'inline';

        try {
            // 4. COLETAR DADOS
            const formData = new FormData(form);
            const dados = Object.fromEntries(formData.entries());

            // Determinar tipo de formul√°rio
            const tipo = dados.tipo || 'PF';

            console.log('üìù Dados coletados:', dados);
            console.log('üìã Tipo:', tipo);

            // 5. SALVAR NO FIREBASE
            const result = await window.SalvoFirebase.saveCadastro(dados, tipo);

            console.log('üî• Resultado Firebase:', result);

            if (result.success) {
                console.log('‚úÖ Cadastro realizado com sucesso!');

                // Reset captcha
                if (window.SalvoCaptcha) {
                    window.SalvoCaptcha.reset();
                }

                // Fechar modal se existir
                if (window.SalvoModal) {
                    window.SalvoModal.close();
                }

                // Redirecionar para p√°gina de obrigado
                setTimeout(() => {
                    window.location.href = 'obrigado.html';
                }, 500);

            } else {
                console.error('‚ùå Erro no cadastro:', result);
                alert(result.message || 'Erro ao realizar cadastro. Tente novamente.');

                // Gerar nova opera√ß√£o captcha
                if (window.SalvoCaptcha) {
                    window.SalvoCaptcha.refresh();
                }
            }

        } catch (error) {
            console.error('‚ùå Erro inesperado no submit:', error);
            alert('Erro inesperado. Tente novamente.');

            // Gerar nova opera√ß√£o captcha
            if (window.SalvoCaptcha) {
                window.SalvoCaptcha.refresh();
            }
        } finally {
            // 6. REMOVER LOADING
            submitBtn.disabled = false;
            submitBtn.classList.remove('loading');
            if (btnText) btnText.style.display = 'inline';
            if (btnLoading) btnLoading.style.display = 'none';
        }
    }

    // Validadores
    static isValidEmail(email) {
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return regex.test(email);
    }

    static isValidPhone(phone) {
        const cleaned = phone.replace(/\D/g, '');
        return cleaned.length >= 10 && cleaned.length <= 11;
    }

    static isValidCNPJ(cnpj) {
        const cleaned = cnpj.replace(/\D/g, '');
        if (cleaned.length !== 14) return false;

        // Eliminar CNPJs inv√°lidos conhecidos
        if (/^(\d)\1{13}$/.test(cleaned)) return false;

        // Validar d√≠gitos verificadores
        let tamanho = cleaned.length - 2;
        let numeros = cleaned.substring(0, tamanho);
        let digitos = cleaned.substring(tamanho);
        let soma = 0;
        let pos = tamanho - 7;

        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2) pos = 9;
        }

        let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        if (resultado != digitos.charAt(0)) return false;

        tamanho = tamanho + 1;
        numeros = cleaned.substring(0, tamanho);
        soma = 0;
        pos = tamanho - 7;

        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2) pos = 9;
        }

        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        return resultado == digitos.charAt(1);
    }
}

// Classe para gerenciar modal
class SalvoModal {
    static init() {
        this.modal = document.getElementById('modal-forms');
        this.formPF = document.getElementById('form-pf');
        this.formPJ = document.getElementById('form-pj');

        this.setupEvents();
        console.log('üî≤ SalvoModal inicializado');
    }

    static setupEvents() {
        if (!this.modal) return;

        // Bot√µes para abrir modal
        document.querySelectorAll('[data-form]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const formType = e.target.closest('[data-form]').getAttribute('data-form');
                this.open(formType);
            });
        });

        // Bot√µes para fechar modal
        document.querySelectorAll('.form__close').forEach(btn => {
            btn.addEventListener('click', () => this.close());
        });

        // Fechar ao clicar fora
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal || e.target.classList.contains('modal__overlay')) {
                this.close();
            }
        });

        // Fechar com ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal.classList.contains('modal--active')) {
                this.close();
            }
        });
    }

    static open(formType = 'pf') {
        if (!this.modal) return;

        // Esconder todos os formul√°rios
        if (this.formPF) this.formPF.style.display = 'none';
        if (this.formPJ) this.formPJ.style.display = 'none';

        // Mostrar formul√°rio espec√≠fico
        if (formType === 'pf' && this.formPF) {
            this.formPF.style.display = 'block';
        } else if (formType === 'pj' && this.formPJ) {
            this.formPJ.style.display = 'block';
        }

        // Mostrar modal
        this.modal.classList.add('modal--active');
        document.body.classList.add('modal-open');

        // Focar no primeiro campo
        setTimeout(() => {
            const activeForm = formType === 'pf' ? this.formPF : this.formPJ;
            if (activeForm) {
                const firstInput = activeForm.querySelector('input:not([type="hidden"])');
                if (firstInput) firstInput.focus();
            }
        }, 300);

        // Gerar novo captcha
        if (window.SalvoCaptcha) {
            window.SalvoCaptcha.refresh();
        }
    }

    static close() {
        if (!this.modal) return;

        this.modal.classList.remove('modal--active');
        document.body.classList.remove('modal-open');

        // Limpar formul√°rios
        document.querySelectorAll('.form').forEach(form => {
            form.reset();
            // Limpar erros
            form.querySelectorAll('.form__error').forEach(error => {
                error.textContent = '';
                error.style.display = 'none';
            });
            form.querySelectorAll('.form__group').forEach(group => {
                group.classList.remove('error', 'success');
            });
            form.querySelectorAll('.form__input').forEach(input => {
                input.classList.remove('form__input--error');
            });
        });

        // Reset captcha
        if (window.SalvoCaptcha) {
            window.SalvoCaptcha.reset();
        }
    }
}

// Inicializar quando DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM carregado - iniciando SalvoMasks e SalvoModal');
    
    // Aguardar um pouco para garantir que outros scripts carregaram
    setTimeout(() => {
        SalvoMasks.init();
        SalvoModal.init();
        console.log('‚úÖ SalvoMasks e SalvoModal inicializados');
    }, 500);
});

// Expor classes globalmente para debug
window.SalvoMasks = SalvoMasks;
window.SalvoModal = SalvoModal;