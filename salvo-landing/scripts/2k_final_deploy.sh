#!/bin/bash

# Script 2k: Deploy Final e Verifica√ß√µes - Salv√¥ Landing Page
# Autor: Rafael Ferreira
# Data: 2025-08-16
# Uso: cp ../scripts/2k_final_deploy.sh . && chmod +x 2k_final_deploy.sh && ./2k_final_deploy.sh

echo "üöÄ Salv√¥ - Deploy Final e Verifica√ß√µes..."

# Verificar se est√° na pasta correta
if [ ! -f "index.html" ] || [ ! -d "assets" ]; then
    echo "‚ùå Erro: Execute este script dentro da pasta salvo-landing"
    echo "üìÅ Comando correto:"
    echo "   cd salvo-landing"
    echo "   cp ../scripts/2k_final_deploy.sh ."
    echo "   chmod +x 2k_final_deploy.sh && ./2k_final_deploy.sh"
    exit 1
fi

echo "‚úÖ Pasta do projeto encontrada!"

# Configura√ß√µes do servidor
VPS_HOST="212.85.1.55"
VPS_USER="salvo-vtec"
VPS_PASSWORD="Bj4hwtmpSXA0ELI32nsI"
VPS_DOMAIN="salvo.vancouvertec.com.br"
VPS_PATH="/home/salvo-vtec/htdocs/salvo.vancouvertec.com.br"

# 1. VERIFICA√á√ïES PR√â-DEPLOY
echo "üîç Executando verifica√ß√µes pr√©-deploy..."

# Lista de arquivos essenciais
essential_files=(
    "index.html"
    "faq.html"
    "contato.html"
    "obrigado.html"
    "termos.html"
    "privacidade.html"
    "assets/css/style.css"
    "assets/css/whatsapp-fonts.css"
    "assets/css/forms-improved.css"
    "assets/js/app.js"
    "assets/js/firebase.js"
    "assets/js/masks-validations.js"
    "sitemap.xml"
    "robots.txt"
    "manifest.webmanifest"
)

missing_files=()
for file in "${essential_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -eq 0 ]; then
    echo "‚úÖ Todos os arquivos essenciais est√£o presentes!"
else
    echo "‚ùå Arquivos essenciais faltando:"
    printf '%s\n' "${missing_files[@]}"
    echo ""
    echo "Execute os scripts anteriores antes do deploy:"
    echo "  2g_fix_navigation_colors.sh"
    echo "  2h_fix_forms_fonts.sh"
    echo "  2i_javascript_validations.sh"
    echo "  2j_firebase_config.sh"
    exit 1
fi

# 2. VERIFICAR DEPEND√äNCIAS DO SERVIDOR
echo "üîß Verificando depend√™ncias do servidor..."

if ! command -v sshpass &> /dev/null; then
    echo "üì¶ Instalando sshpass..."
    sudo apt update && sudo apt install -y sshpass
fi

if ! command -v rsync &> /dev/null; then
    echo "üì¶ Instalando rsync..."
    sudo apt install -y rsync
fi

echo "‚úÖ Depend√™ncias verificadas!"

# 3. TESTAR CONEX√ÉO COM SERVIDOR
echo "üåê Testando conex√£o com servidor..."

if ! sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "$VPS_USER@$VPS_HOST" "echo 'Conex√£o OK'" > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor"
    echo "üîß Verifique:"
    echo "   - Conex√£o com internet"
    echo "   - IP do servidor: $VPS_HOST"
    echo "   - Usu√°rio: $VPS_USER"
    echo "   - Senha configurada"
    exit 1
fi

echo "‚úÖ Conex√£o com servidor estabelecida!"

# 4. BACKUP DA VERS√ÉO ATUAL NO SERVIDOR
echo "üíæ Criando backup da vers√£o atual no servidor..."

BACKUP_SERVER_DIR="/home/$VPS_USER/backups/landing-$(date +%Y%m%d_%H%M%S)"

sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
mkdir -p $BACKUP_SERVER_DIR
if [ -d $VPS_PATH ]; then
    cp -r $VPS_PATH/* $BACKUP_SERVER_DIR/ 2>/dev/null || true
    echo '‚úÖ Backup criado em: $BACKUP_SERVER_DIR'
else
    echo '‚ö†Ô∏è Primeira instala√ß√£o - sem backup necess√°rio'
fi
"

# 5. OTIMIZA√á√ïES PR√â-DEPLOY
echo "‚ö° Aplicando otimiza√ß√µes..."

# Backup local antes das otimiza√ß√µes
BACKUP_LOCAL_DIR="backup-pre-deploy-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_LOCAL_DIR"
cp -r . "$BACKUP_LOCAL_DIR/" 2>/dev/null

# Minificar CSS (simples)
if [ -f "assets/css/style.css" ]; then
    echo "üóúÔ∏è Comprimindo CSS..."
    # Remover coment√°rios e espa√ßos extras (minifica√ß√£o simples)
    sed -e 's/\/\*.*\*\///g' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' assets/css/style.css > assets/css/style.min.css
    echo "‚úÖ CSS minificado!"
fi

# Verificar integridade do HTML
echo "üîç Verificando integridade do HTML..."

html_errors=()
for html_file in *.html; do
    if [ -f "$html_file" ]; then
        # Verificar tags b√°sicas
        if ! grep -q "</html>" "$html_file"; then
            html_errors+=("$html_file: falta tag </html>")
        fi
        if ! grep -q "</body>" "$html_file"; then
            html_errors+=("$html_file: falta tag </body>")
        fi
    fi
done

if [ ${#html_errors[@]} -eq 0 ]; then
    echo "‚úÖ HTML v√°lido!"
else
    echo "‚ö†Ô∏è Problemas no HTML:"
    printf '%s\n' "${html_errors[@]}"
fi

# 6. UPLOAD PARA SERVIDOR
echo "üì§ Enviando arquivos para o servidor..."

# Fun√ß√£o para upload com rsync
upload_files() {
    local source="$1"
    local destination="$2"

    sshpass -p "$VPS_PASSWORD" rsync -avz \
        --delete \
        --progress \
        -e "ssh -o StrictHostKeyChecking=no" \
        "$source" "$VPS_USER@$VPS_HOST:$destination"
}

# Criar estrutura no servidor
sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
mkdir -p $VPS_PATH
mkdir -p $VPS_PATH/assets/{css,js,img}
"

# Upload dos arquivos
echo "üìÑ Enviando arquivos HTML..."
upload_files "*.html" "$VPS_PATH/"

echo "üé® Enviando assets CSS..."
upload_files "assets/css/" "$VPS_PATH/assets/"

echo "‚ö° Enviando JavaScript..."
upload_files "assets/js/" "$VPS_PATH/assets/"

echo "üñºÔ∏è Enviando imagens..."
if [ -d "assets/img" ]; then
    upload_files "assets/img/" "$VPS_PATH/assets/"
fi

echo "üìã Enviando arquivos de configura√ß√£o..."
for file in robots.txt sitemap.xml manifest.webmanifest FIREBASE_SETUP.md; do
    if [ -f "$file" ]; then
        upload_files "$file" "$VPS_PATH/"
    fi
done

# 7. CONFIGURAR PERMISS√ïES NO SERVIDOR
echo "üîê Configurando permiss√µes no servidor..."

sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
find $VPS_PATH -type f -exec chmod 644 {} \;
find $VPS_PATH -type d -exec chmod 755 {} \;
chown -R $VPS_USER:$VPS_USER $VPS_PATH
"

echo "‚úÖ Permiss√µes configuradas!"

# 8. CONFIGURAR .HTACCESS OTIMIZADO
echo "‚öôÔ∏è Configurando .htaccess otimizado..."

sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
cat > $VPS_PATH/.htaccess << 'EOL'
# Salv√¥ Landing Page - Configura√ß√µes Apache
# Gerado automaticamente em $(date)

# Compress√£o Gzip
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE image/svg+xml
</IfModule>

# Cache para arquivos est√°ticos
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css \"access plus 1 month\"
    ExpiresByType application/javascript \"access plus 1 month\"
    ExpiresByType image/png \"access plus 6 months\"
    ExpiresByType image/jpg \"access plus 6 months\"
    ExpiresByType image/jpeg \"access plus 6 months\"
    ExpiresByType image/gif \"access plus 6 months\"
    ExpiresByType image/svg+xml \"access plus 6 months\"
    ExpiresByType image/x-icon \"access plus 1 year\"
    ExpiresByType font/woff \"access plus 1 year\"
    ExpiresByType font/woff2 \"access plus 1 year\"
    ExpiresByType text/html \"access plus 1 hour\"
</IfModule>

# Headers de seguran√ßa
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options SAMEORIGIN
    Header always set X-XSS-Protection \"1; mode=block\"
    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"
    Header always set Permissions-Policy \"geolocation=(), microphone=(), camera=()\"
</IfModule>

# Redirecionamento HTTPS
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</IfModule>

# P√°gina de erro 404 personalizada
ErrorDocument 404 /index.html

# Bloquear acesso a arquivos sens√≠veis
<Files \"*.md\">
    Order allow,deny
    Deny from all
</Files>

<Files \"backup-*\">
    Order allow,deny
    Deny from all
</Files>

# Otimizar entrega de arquivos
<IfModule mod_mime.c>
    AddType application/font-woff2 .woff2
    AddType image/svg+xml .svg
</IfModule>
EOL
"

echo "‚úÖ .htaccess configurado!"

# 9. VERIFICA√á√ïES P√ìS-DEPLOY
echo "üîç Executando verifica√ß√µes p√≥s-deploy..."

# Testar se o site est√° acess√≠vel
echo "üåê Testando acessibilidade do site..."

http_status=$(sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "curl -s -o /dev/null -w '%{http_code}' http://localhost" 2>/dev/null || echo "000")

if [[ "$http_status" == "200" || "$http_status" == "301" || "$http_status" == "302" ]]; then
    echo "‚úÖ Site acess√≠vel! Status: $http_status"
else
    echo "‚ö†Ô∏è Aviso: Site pode n√£o estar acess√≠vel. Status: $http_status"
fi

# Verificar arquivos no servidor
echo "üìã Verificando arquivos no servidor..."

server_file_check=$(sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" "
cd $VPS_PATH
echo '=== ESTRUTURA DE ARQUIVOS ==='
ls -la
echo ''
echo '=== ASSETS ==='
ls -la assets/
echo ''
echo '=== CSS ==='
ls -la assets/css/
echo ''
echo '=== JS ==='
ls -la assets/js/
")

echo "$server_file_check"

# 10. LIMPEZA E RELAT√ìRIO FINAL
echo "üßπ Executando limpeza..."

# Remover backups locais antigos (manter apenas os 3 mais recentes)
backup_count=$(ls -1d backup-* 2>/dev/null | wc -l)
if [ "$backup_count" -gt 3 ]; then
    ls -1td backup-* | tail -n +4 | xargs rm -rf
    echo "‚úÖ Backups antigos removidos!"
fi

# Gerar relat√≥rio final
echo ""
echo "üìã RELAT√ìRIO FINAL DO DEPLOY:"
echo "============================================================"
echo "üéØ Projeto: Salv√¥ Landing Page"
echo "üìÖ Data: $(date '+%d/%m/%Y %H:%M:%S')"
echo "üåê Dom√≠nio: https://$VPS_DOMAIN"
echo "üìÇ Servidor: $VPS_HOST:$VPS_PATH"
echo ""
echo "‚úÖ ARQUIVOS DEPLOYADOS:"
echo "   üìÑ P√°ginas HTML: $(ls -1 *.html | wc -l)"
echo "   üé® Arquivos CSS: $(ls -1 assets/css/*.css 2>/dev/null | wc -l)"
echo "   ‚ö° Arquivos JS: $(ls -1 assets/js/*.js 2>/dev/null | wc -l)"
echo ""
echo "üîß CONFIGURA√á√ïES:"
echo "   ‚úÖ Fontes WhatsApp configuradas"
echo "   ‚úÖ Formul√°rios com valida√ß√£o"
echo "   ‚úÖ Firebase integrado (necessita configura√ß√£o manual)"
echo "   ‚úÖ reCAPTCHA v1 implementado"
echo "   ‚úÖ .htaccess otimizado"
echo "   ‚úÖ Cache e compress√£o habilitados"
echo ""
echo "üîó LINKS IMPORTANTES:"
echo "   üè† Site: https://$VPS_DOMAIN"
echo "   ‚ùì FAQ: https://$VPS_DOMAIN/faq.html"
echo "   üìß Contato: https://$VPS_DOMAIN/contato.html"
echo "   üìã Termos: https://$VPS_DOMAIN/termos.html"
echo "   üîí Privacidade: https://$VPS_DOMAIN/privacidade.html"
echo ""
echo "‚ö†Ô∏è  PR√ìXIMAS A√á√ïES MANUAIS:"
echo "   1. üî• Configurar Firebase (ler FIREBASE_SETUP.md)"
echo "   2. üõ°Ô∏è Configurar reCAPTCHA"
echo "   3. üìß Configurar e-mail para formul√°rio de contato"
echo "   4. üß™ Testar todos os formul√°rios"
echo "   5. üìä Configurar Google Analytics (opcional)"
echo ""
echo "üìû SUPORTE:"
echo "   üìß E-mail: oficialsalvo@gmail.com"
echo "   üíª Documenta√ß√£o: Ver FIREBASE_SETUP.md no servidor"
echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "üöÄ O Salv√¥ est√° no ar em: https://$VPS_DOMAIN"
echo ""
echo "üí° Para atualiza√ß√µes futuras, use:"
echo "   ./quick-update.sh (se existir)"
echo "   ou execute novamente: 2f_landing_deploy.sh --update"
